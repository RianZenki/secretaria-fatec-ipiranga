// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Aluno {
  id           String        @id @default(uuid())
  nome         String
  email        String        @unique
  curso        String
  turno        String
  ra           String        @unique
  senha        String
  token        String        @unique
  autenticado  Boolean       @default(false)
  cargo        Cargo         @default(ALUNO)
  solicitacoes Solicitacao[]
  Resposta     Resposta[]

  @@map("alunos")
}

model Solicitacao {
  id            String      @id @default(uuid())
  tipo_pedidoId Int
  descricao     String
  status        String      @default("em andamento")
  criado_em     DateTime    @default(now())
  atualizado_em DateTime    @default(now())
  encerrado_em  DateTime?
  encerrado_por String?
  alunoId       String
  Arquivo       Arquivo[]
  Resposta      Resposta[]
  Aluno         Aluno       @relation(fields: [alunoId], references: [id])
  tipo_pedido   Tipo_pedido @relation(fields: [tipo_pedidoId], references: [id])

  @@map("solicitacoes")
}

model Arquivo {
  id            String       @id @default(uuid())
  nome          String       @unique
  Solicitacao   Solicitacao? @relation(fields: [solicitacaoId], references: [id])
  solicitacaoId String?
  Resposta      Resposta?    @relation(fields: [respostaId], references: [id])
  respostaId    String?

  @@map("arquivos")
}

model Resposta {
  id            String      @id @default(uuid())
  solicitacaoId String
  solicitcao    Solicitacao @relation(fields: [solicitacaoId], references: [id])
  descricao     String
  arquivo       Arquivo[]
  criado_em     DateTime    @default(now())
  criado_por    String // nome
  cargo         Cargo // aluno || secretario
  aluno         Aluno?      @relation(fields: [alunoId], references: [id])
  alunoId       String?
  secretario    Secretario? @relation(fields: [secretarioId], references: [id])
  secretarioId  String?

  @@map("respostas")
}

model Tipo_pedido {
  id                     Int                      @id @default(autoincrement())
  tipo                   String                   @unique
  Tipo_pedido_secretario Tipo_pedido_secretario[]
  Solicitacao            Solicitacao[]

  @@map("tipos_pedidos")
}

model Secretario {
  id                     String                   @id @default(uuid())
  numeroMatricula        String                   @unique
  nome                   String
  email                  String                   @unique
  senha                  String
  token                  String                   @unique
  ativo                  Boolean                  @default(true)
  cargo                  Cargo
  tipo_pedido_secretario Tipo_pedido_secretario[]
  Resposta               Resposta[]

  @@map("secretarios")
}

model Tipo_pedido_secretario {
  id            String      @id @default(uuid())
  tipo_pedido   Tipo_pedido @relation(fields: [tipo_pedidoId], references: [id])
  secretario    Secretario  @relation(fields: [secretarioId], references: [id])
  secretarioId  String
  tipo_pedidoId Int

  @@map("tipo_pedidos_secretarios")
}

enum Cargo {
  ALUNO
  SECRETARIO
  SECRETARIO_GERAL
}

enum Status {
  EM_ANDAMENTO
  FINALIZADO
}
